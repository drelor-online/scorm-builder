import { Given, Then } from '@cucumber/cucumber'
import { expect } from '@playwright/test'

Given('I navigate to the application', async function () {
  console.log('ðŸš€ Navigating to application...')
  
  const url = this.baseUrl || 'http://localhost:1420'
  
  // First verify mock is available
  const hasTauri = await this.page.evaluate(() => {
    return typeof window.__TAURI__ !== 'undefined'
  })
  console.log('Mock Tauri available before navigation:', hasTauri)
  
  await this.page.goto(url)
  console.log('âœ… Navigation complete')
})

Then('the mock Tauri API should be available', async function () {
  const tauriInfo = await this.page.evaluate(() => {
    if (typeof window.__TAURI__ === 'undefined') {
      return { available: false }
    }
    return {
      available: true,
      hasInvoke: typeof window.__TAURI__.invoke === 'function',
      hasEvent: typeof window.__TAURI__.event !== 'undefined'
    }
  })
  
  console.log('Tauri API info:', tauriInfo)
  expect(tauriInfo.available).toBeTruthy()
  expect(tauriInfo.hasInvoke).toBeTruthy()
})

Then('the app should not show storage initialization errors', async function () {
  // Wait a bit for any errors to appear
  await this.page.waitForTimeout(2000)
  
  // Check console errors
  const hasStorageError = this.consoleErrors.some(error => 
    error.includes('Storage Initialization Failed') ||
    error.includes('Failed to initialize')
  )
  
  expect(hasStorageError).toBeFalsy()
  
  // Check if the app loaded successfully
  const appLoaded = await this.page.evaluate(() => {
    // Check if React app is mounted
    return document.querySelector('#root')?.children.length > 0
  })
  
  expect(appLoaded).toBeTruthy()
})