export type HelpTopicCategory = 'workflow' | 'features' | 'troubleshooting' | 'faq'

export interface HelpTopic {
  id: string
  category: HelpTopicCategory
  title: string
  summary: string
  details: string[]
  tips?: string[]
  warnings?: string[]
  related?: string[]
  keywords?: string[]
}

export const helpTopics: HelpTopic[] = [
  // ----- Workflow -----
  {
    id: 'step-dashboard',
    category: 'workflow',
    title: 'Dashboard & Project Resume',
    summary: 'Open recent work, create fresh projects, and monitor autosave health before entering the wizard.',
    details: [
      'Use the dashboard tiles to resume the most recent project, start from templates, or import existing JSON quickly.',
      'The autosave indicator shows whether the last save completed successfully and surfaces recovery options when something failed.',
      'Open the Project Actions menu to duplicate, archive, or view the location of the underlying .scormproj file stored in your Documents folder.',
      'Keyboard shortcuts (Ctrl+O / Ctrl+S) work on the dashboard for rapid project management.'
    ],
    tips: [
      'Pin frequently used demo projects in the dashboard so the wizard opens with pre-populated data for demos.',
      'If the autosave health badge is yellow, inspect the backups directory before continuing work.'
    ],
    related: ['feature-auto-save', 'step-seed'],
    keywords: ['dashboard', 'projects', 'resume', 'autosave']
  },
  {
    id: 'step-seed',
    category: 'workflow',
    title: 'Step 1: Course Seed & Templates',
    summary: 'Define the audience, templates, and topics that drive every later step in the build.',
    details: [
      'Provide a descriptive course title, pick a difficulty (1-5), and choose a template to pre-fill industry-aligned topics.',
      'Edit, add, or remove topics inline; the wizard automatically syncs the list with autosave to prevent losing exploratory drafts.',
      'The seed state is validated before navigating forward so subsequent prompts, media, and assessment steps stay in sync.',
      'Use the template preview to understand which sections will be generated automatically before switching to a different template.'
    ],
    tips: [
      'Keep topic names outcome-focused ("Hazard Identification" instead of "Module 2") to improve AI prompt clarity.',
      'Difficulty level also powers default word counts and assessment rigor in prompt tuning, so set it early.'
    ],
    related: ['feature-prompt-tuning', 'step-prompt'],
    keywords: ['seed', 'template', 'topics', 'difficulty']
  },
  {
    id: 'step-prompt',
    category: 'workflow',
    title: 'Step 2: AI Prompt Generator',
    summary: 'Generate or customize the master prompt that instructs your preferred AI model.',
    details: [
      'Review the autogenerated prompt and optionally enter your own text in the custom prompt field.',
      'Use the Prompt Tuning button to adjust narration length, HTML complexity, assessment mix, and media guidance before copying.',
      'Copy the prompt with one click; accessibility announcements confirm the status for screen-reader users.',
      'Once the AI response is ready, return here anytime to regenerate the prompt with different tuning presets.'
    ],
    tips: [
      'Take a snapshot of the tuning summary when experimenting so you can re-apply successful combinations later.',
      'Claude 3.5 Sonnet and GPT-4o have been the most reliable models for delivering the entire JSON in one pass.'
    ],
    related: ['feature-prompt-tuning', 'step-json'],
    keywords: ['AI', 'prompt', 'tuning', 'copy']
  },
  {
    id: 'step-json',
    category: 'workflow',
    title: 'Step 3: JSON Import & Validation',
    summary: 'Paste the AI output, auto-fix structural issues, and preview course coverage before committing.',
    details: [
      'Paste or upload the completed JSON response; the validator highlights schema violations and missing sections.',
      'Run Smart Auto-Fix to repair common spacing, escape, and orphaned media issues without leaving the app.',
      'Use the embedded Simple JSON Editor for targeted edits while preserving formatting, then re-validate instantly.',
      'Cleanup utilities reconcile media references so the Unified Media Library stays accurate in later steps.'
    ],
    tips: [
      'If the AI response is truncated, request a continuation and merge the content before re-validating.',
      'Keep a copy of the validated JSON with your project files for future auditing or translation work.'
    ],
    related: ['troubleshoot-json-validation', 'step-media'],
    keywords: ['JSON', 'validation', 'auto-fix', 'editor']
  },
  {
    id: 'step-media',
    category: 'workflow',
    title: 'Step 4: Media Enhancement',
    summary: 'Manage images, video embeds, and captions through the unified media library.',
    details: [
      'Browse each page with the left-hand navigation; the Unified Media pane shows what is already attached.',
      'Use safe external download mode for whitelisted domains or the force-download fallback when working behind corporate proxies.',
      'Progressive loading prioritizes visual media for the active page, with contamination detectors flagging outdated audio or captions.',
      'All media assets are stored in the Tauri-managed project directory, so changes persist across sessions and portable exports.'
    ],
    tips: [
      'Switch the loading profile to "visual-only" while reviewing slides to defer heavier audio downloads.',
      'Run the contamination cleanup when swapping JSON sources to ensure stale references are removed before narration.'
    ],
    related: ['feature-unified-media', 'troubleshoot-media-download'],
    keywords: ['media', 'images', 'video', 'library', 'unified']
  },
  {
    id: 'step-audio',
    category: 'workflow',
    title: 'Step 5: Audio Narration',
    summary: 'Generate scripts, upload voiceovers, and maintain caption parity for accessibility.',
    details: [
      'Export the consolidated narration script to share with AI voice tools such as Murf.ai or ElevenLabs.',
      'Upload MP3 narration and optional VTT captions in a single ZIP; the wizard replaces prior assets atomically to avoid drift.',
      'Preview individual clips in the modal player and trigger contamination cleanup if mismatched captions are detected.',
      'Clip timing helpers map YouTube segments directly into the media library for blended audio/video experiences.'
    ],
    tips: [
      'Keep narration filenames aligned with the generated IDs (audio-0.mp3, audio-1.mp3, ...) to streamline re-imports.',
      'Run a quick narration preview before advancing so you can fix mis-pronunciations while tooling context is open.'
    ],
    related: ['feature-unified-media', 'troubleshoot-audio'],
    keywords: ['audio', 'narration', 'captions', 'script']
  },
  {
    id: 'step-activities',
    category: 'workflow',
    title: 'Step 6: Activities & Assessment Studio',
    summary: 'Review knowledge checks and final assessments with consolidated editing tools.',
    details: [
      'Use the summary cards to verify coverage: question counts, objective alignment, and difficulty balance.',
      'Inline editors support multiple-choice, true/false, and fill-in-the-blank knowledge checks with targeted feedback fields.',
      'Assessment wiring mirrors LMS expectations: you can adjust scoring, feedback, and sequencing without touching JSON.',
      'Validation guards prevent removing mandatory assessment questions so SCORM manifests stay consistent.'
    ],
    tips: [
      'Focus feedback on remediation steps ("Review hazard controls") instead of generic phrases.',
      'Use the filters to compare knowledge check coverage per topic before finalizing the SCORM package.'
    ],
    related: ['step-settings', 'best-practices'],
    keywords: ['assessment', 'knowledge check', 'questions']
  },
  {
    id: 'step-settings',
    category: 'workflow',
    title: 'Step 7: Course Settings & Compliance',
    summary: 'Configure navigation, completion logic, timing, and accessibility rules before export.',
    details: [
      'Choose between linear and free navigation, require audio completion, and control auto-advance behaviour per course.',
      'Adjust pass marks, retake policies, and completion criteria (view all, pass assessment, minimum time).',
      'Set learner experience toggles: show/hide outline, confirm before exit, and pick default font scaling.',
      'Define timing constraints such as overall time limits, idle session timeout, and minimum time spent for completion tracking.'
    ],
    tips: [
      'Corporate compliance courses often combine "view and pass" with a minimum time to meet audit requirements.',
      'Document any deviations from your organizational template so downstream reviewers understand intentional changes.'
    ],
    related: ['step-scorm', 'feature-auto-save'],
    keywords: ['settings', 'navigation', 'completion', 'timing']
  },
  {
    id: 'step-scorm',
    category: 'workflow',
    title: 'Step 8: Generate SCORM Package',
    summary: 'Bundle the course into a SCORM 1.2 compliant ZIP and validate before LMS upload.',
    details: [
      'Launch the build; progress events stream from the Tauri backend, highlighting media processing and manifest creation.',
      'Download the generated ZIP or re-run immediately after tweaks--caching keeps builds fast across revisions.',
      'Use the Validate SCORM CLI action (or npm run validate-scorm) to test manifests locally before sending to an LMS.',
      'Portable builds include the desktop runtime, allowing SMEs to review without installing Node or the dev toolchain.'
    ],
    tips: [
      'Store the exported ZIP alongside the project folder so you can trace artifact history during audits.',
      'If your LMS times out on large uploads, use the portable build output to perform offline reviews first.'
    ],
    related: ['feature-portable-runtime', 'troubleshoot-scorm'],
    keywords: ['SCORM', 'export', 'package', 'validate']
  },

  // ----- Features -----
  {
    id: 'feature-prompt-tuning',
    category: 'features',
    title: 'Prompt Tuning Controls',
    summary: 'Fine-tune narration length, content density, media guidance, and assessment depth before generating prompts.',
    details: [
      'Adjust narration length, HTML complexity, and word counts per page type to influence AI output structure.',
      'Set image and video specificity levels; the prompt builder annotates media instructions so the AI produces richer suggestions.',
      'Control assessment volume, question mix, and pass marks, ensuring JSON output aligns with compliance policies.',
      'Tuning presets are stored per project--returning to defaults is a single click if experiments miss the mark.'
    ],
    tips: [
      'Short narration works well for microlearning modules; use the advisory character limit mode for live facilitations.',
      'Log effective tuning profiles in project notes so future releases stay consistent.'
    ],
    related: ['step-prompt', 'step-json'],
    keywords: ['tuning', 'settings', 'prompt', 'narration']
  },
  {
    id: 'feature-unified-media',
    category: 'features',
    title: 'Unified Media Library',
    summary: 'Centralized storage, caching, and integrity checks for every asset referenced in your course.',
    details: [
      'MediaService deduplicates files by ID and caches binary data so previews stay instant across steps.',
      'Contamination guards remove outdated audio/caption pairings when JSON or uploads change.',
      'Visual-only and balanced loading profiles keep large projects responsive by streaming assets on demand.',
      'Media diagnostics and cleanup utilities help recover from partially imported projects or interrupted downloads.'
    ],
    tips: [
      'Run the contamination cleaner after importing JSON from a different AI run to keep the library synchronized.',
      'Switch to the visual-only profile when reviewing slides over low bandwidth connections.'
    ],
    related: ['step-media', 'step-audio'],
    keywords: ['media', 'cache', 'library', 'cleanup']
  },
  {
    id: 'feature-auto-save',
    category: 'features',
    title: 'Autosave, Backups, and Recovery',
    summary: 'Every critical change is persisted locally with automatic backups for safety.',
    details: [
      'Projects autosave to the Tauri-managed Documents/SCORM Projects directory; status indicators surface sync issues.',
      'Versioned backups capture point-in-time snapshots so you can roll back from the File menu on desktop builds.',
      'Visited steps and tuning presets are stored separately, letting reviewers jump into any phase without rework.',
      'Crash recovery restores the last stable snapshot and replays pending mutations when the app reopens.'
    ],
    tips: [
      'Keep the portable build output within the project folder to ensure backups always travel with the course.',
      'Before large refactors, trigger a manual backup from the desktop menu so you can compare results later.'
    ],
    related: ['step-dashboard', 'troubleshoot-performance'],
    keywords: ['autosave', 'backup', 'recovery', 'storage']
  },
  {
    id: 'feature-portable-runtime',
    category: 'features',
    title: 'Portable Runtime & Distribution',
    summary: 'Generate a self-contained Windows build for SMEs and reviewers without development tooling.',
    details: [
      'Run portable-build-simple.bat to compile the Tauri shell and copy the executable to the portable-build/SCORM-Builder-Portable folder.',
      'Use the --frontend-only flag for quick UI checks without rebuilding the desktop shell.',
      'Portable bundles keep autosave paths inside the reviewers Documents/SCORM Projects directory for consistency.',
      'Distribute the folder as-is; reviewers can open existing .scormproj files or create new ones without Node.js installed.'
    ],
    tips: [
      'Regenerate the portable build after major media or prompt tuning updates so reviewers test the latest logic.',
      'Include validated SCORM packages alongside the portable folder for complete review kits.'
    ],
    related: ['step-scorm'],
    keywords: ['portable', 'build', 'tauri', 'distribution']
  },

  // ----- Troubleshooting -----
  {
    id: 'troubleshoot-json-validation',
    category: 'troubleshooting',
    title: 'Fixing JSON Validation Errors',
    summary: 'Resolve schema mismatches, truncation, and character issues reported by the validator.',
    details: [
      'Run Smart Auto-Fix to repair escaped characters, dangling commas, and missing array brackets automatically.',
      'Check the validation summary for missing sections (welcomePage, topics, assessment) and ask the AI to regenerate if needed.',
      'Use the highlights in Simple JSON Editor to locate and correct problematic nodes directly within the app.',
      'If media IDs fail lookups, run the media reconciliation tool to align JSON references with the unified library.'
    ],
    tips: [
      'When an AI response is truncated, copy both parts into a local editor before pasting back into the validator.',
      'Swap smart quotes for straight quotes before retrying the import to avoid hidden Unicode issues.'
    ],
    related: ['step-json', 'feature-unified-media'],
    keywords: ['JSON', 'validation', 'errors', 'auto-fix']
  },
  {
    id: 'troubleshoot-media-download',
    category: 'troubleshooting',
    title: 'Resolving Media Download Issues',
    summary: 'Handle blocked domains, large files, and corrupted caches when bringing media into the project.',
    details: [
      'Use the secure downloader for HTTPS whitelisted domains; switch to the unsafe fallback only inside trusted corporate networks.',
      'Clear the Blob URL cache from the Media panel if previews show stale assets after iterating on JSON.',
      'Large downloads over 20MB are rejected--compress assets or host them in a CDN that supports streaming.',
      'When operating offline, upload local files instead of external URLs to keep the course self-contained.'
    ],
    warnings: [
      'Unsafe download mode bypasses certificate checks; disable it once you have the required asset.',
      'Clearing the cache removes temporary previews but does not delete stored media files.'
    ],
    related: ['step-media', 'feature-unified-media'],
    keywords: ['media', 'download', 'cache', 'proxy']
  },
  {
    id: 'troubleshoot-audio',
    category: 'troubleshooting',
    title: 'Audio & Caption Upload Problems',
    summary: 'Diagnose issues when narration ZIPs or caption files fail validation.',
    details: [
      'Ensure ZIP archives contain MP3 files named after the expected IDs (audio-#.mp3) and optional VTT captions.',
      'If uploads silently fail, verify no audio clip exceeds browser memory limits; split large narrations when necessary.',
      'Run contamination cleanup to purge leftover captions when swapping narration sets.',
      'Preview clips after upload; if playback is silent, confirm the OS audio sandbox allows the Tauri app to play media.'
    ],
    tips: [
      'Generate captions from the same tool that produced the audio to keep timing aligned.',
      'Store the narration ZIP alongside your project backups for quick re-imports.'
    ],
    related: ['step-audio'],
    keywords: ['audio', 'captions', 'upload', 'zip']
  },
  {
    id: 'troubleshoot-scorm',
    category: 'troubleshooting',
    title: 'SCORM Package & LMS Upload Issues',
    summary: 'Validate manifests, troubleshoot LMS imports, and understand LMS compatibility warnings.',
    details: [
      'Use npm run validate-scorm or the desktop validator to confirm imsmanifest.xml and SCO structure.',
      'If an LMS rejects the ZIP, extract it locally and confirm the top-level folder contains imsmanifest.xml.',
      'Set completion criteria in Course Settings to match your LMS expectations; mismatched pass marks can block grade sync.',
      'For large media packages, upload during off-peak hours or ask your LMS admin to extend upload timeouts.'
    ],
    warnings: [
      'Do not rename files inside the ZIP after generation--LMS importers expect specific paths.',
      'SCORM 1.2 packages do not support per-question reporting by default; check LMS documentation if xAPI is required.'
    ],
    related: ['step-scorm', 'faq-lms'],
    keywords: ['SCORM', 'LMS', 'manifest', 'upload']
  },
  {
    id: 'troubleshoot-performance',
    category: 'troubleshooting',
    title: 'Performance & Resource Tips',
    summary: 'Keep large projects responsive and diagnose slowdowns during media-heavy workflows.',
    details: [
      'Open the Performance Monitor (Ctrl+Shift+P) to view render counts, network timings, and memory usage.',
      'Switch the Media step to visual-only loading when reviewing slides on resource-constrained devices.',
      'Clear cached blobs from the media menu if the browser cache grows beyond a few hundred MB.',
      'Disable verbose logging in production builds using VITE_DEBUG_LOGS=false to avoid console bottlenecks.'
    ],
    tips: [
      'Close unused browser tabs or desktop apps before building SCORM packages to free system memory.',
      'Keep Node and Tauri runtimes up to date for the best build performance.'
    ],
    related: ['feature-unified-media', 'feature-auto-save'],
    keywords: ['performance', 'monitor', 'memory', 'speed']
  },

  // ----- FAQ & Best Practices -----
  {
    id: 'faq-common',
    category: 'faq',
    title: 'Frequently Asked Questions',
    summary: 'Answers to common setup, AI, and export questions.',
    details: [
      'Which AI model works best? Claude 3.5 Sonnet or GPT-4o produce the most complete JSON responses.',
      'Is internet access required? The desktop build works offline once assets are downloaded; media search and AI calls require connectivity.',
      'Where are projects stored? Under Documents/SCORM Projects by default, synchronized with local backups.',
      'Can I collaborate? Share the .scormproj folder or the portable build; autosave metadata travels with the project.',
      'Does the app support SCORM 2004? Not yet--SCORM 1.2 is the supported profile for maximum LMS compatibility.'
    ],
    tips: [
      'Pair the FAQ with your internal SOPs so authors understand organizational expectations in addition to tool guidance.'
    ],
    related: ['step-dashboard', 'troubleshoot-scorm'],
    keywords: ['faq', 'ai', 'offline', 'storage']
  },
  {
    id: 'faq-lms',
    category: 'faq',
    title: 'LMS Upload Checklist',
    summary: 'Prepare SCORM packages for upload across common platforms.',
    details: [
      'Moodle: Upload the ZIP via Course Administration > SCORM Activity, then set grading to "Learning Objects."',
      'Canvas: Enable the SCORM app and import the ZIP; Canvas creates an assignment with built-in grading.',
      'Cornerstone & SuccessFactors: Use their SCORM upload wizard and verify completion tracking against your pass mark.',
      'Always test in a sandbox course before production deployment to confirm completion and score reporting.'
    ],
    tips: [
      'Keep a copy of the imsmanifest.xml handy when working with LMS support teams--they often request it for troubleshooting.'
    ],
    related: ['step-scorm', 'troubleshoot-scorm'],
    keywords: ['LMS', 'upload', 'checklist', 'Moodle', 'Canvas']
  },
  {
    id: 'best-practices',
    category: 'faq',
    title: 'Instructional Design Best Practices',
    summary: 'Guidelines for crafting engaging, measurable learning experiences.',
    details: [
      'Tie every topic to a measurable objective and revisit it in assessments or knowledge checks.',
      'Blend media types--visuals, narration, and interactivity--to support different learning styles.',
      'Use feedback to coach learners toward the correct answer instead of simply marking responses right or wrong.',
      'Schedule regular course reviews; autosave makes it easy to iterate without rebuilding from scratch.'
    ],
    tips: [
      'Label project versions with sprint or release numbers so SMEs and reviewers can trace changes quickly.'
    ],
    related: ['step-activities', 'feature-auto-save'],
    keywords: ['best practices', 'instructional design', 'objectives']
  }
]

export function searchTopics(query: string): HelpTopic[] {
  const searchTerm = query.toLowerCase()
  return helpTopics.filter(topic =>
    topic.title.toLowerCase().includes(searchTerm) ||
    topic.summary.toLowerCase().includes(searchTerm) ||
    topic.keywords?.some(keyword => keyword.toLowerCase().includes(searchTerm)) ||
    topic.details.some(detail => detail.toLowerCase().includes(searchTerm))
  )
}

export function getTopicById(id: string): HelpTopic | undefined {
  return helpTopics.find(topic => topic.id === id)
}

export function getRelatedTopics(topicId: string): HelpTopic[] {
  const topic = getTopicById(topicId)
  if (!topic?.related) return []
  return topic.related.map(id => getTopicById(id)).filter(Boolean) as HelpTopic[]
}

export const stepToHelpTopic: Record<number, string> = {
  0: 'step-seed',
  1: 'step-prompt',
  2: 'step-json',
  3: 'step-media',
  4: 'step-audio',
  5: 'step-activities',
  6: 'step-settings',
  7: 'step-scorm'
}
