import { describe, it, expect, vi, beforeEach } from 'vitest'
import { invoke } from '@tauri-apps/api/core'
import { mapAudioIdsFromMediaStore } from '../services/courseContentAudioIdMapper'
import type { CourseContent } from '../types/aiPrompt'

vi.mock('@tauri-apps/api/core', () => ({
  invoke: vi.fn()
}))

describe('App - courseContent audioId mapping on project load', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })

  it('should verify that courseContent from storage needs audioId mapping', async () => {
    // This is what courseContent looks like when loaded from storage
    const loadedCourseContent: CourseContent = {
      welcomePage: {
        id: 'welcome',
        title: 'Welcome',
        content: '<h1>Welcome</h1>',
        narration: 'Welcome narration',
        imageKeywords: [],
        imagePrompts: [],
        videoSearchTerms: [],
        duration: 1
        // NOTE: No audioId property
      },
      learningObjectivesPage: {
        id: 'objectives',
        title: 'Objectives',
        content: '<h2>Objectives</h2>',
        narration: 'Objectives narration',
        imageKeywords: [],
        imagePrompts: [],
        videoSearchTerms: [],
        duration: 1
        // NOTE: No audioId property
      },
      topics: [{
        id: 'topic-0',
        title: 'Safety Basics',
        content: '<p>Safety content</p>',
        narration: 'Safety narration',
        imageKeywords: [],
        imagePrompts: [],
        videoSearchTerms: [],
        duration: 5
        // NOTE: No audioId property
      }],
      assessment: {
        questions: [],
        passMark: 80,
        narration: null
      }
    }

    // Verify that audioId properties are missing (they don't exist on the type)
    expect('audioId' in loadedCourseContent.welcomePage).toBe(false)
    expect('audioId' in loadedCourseContent.learningObjectivesPage).toBe(false)
    expect('audioId' in loadedCourseContent.topics[0]).toBe(false)
  })

  it('should map audioIds from MediaStore when called', async () => {
    const courseContent: CourseContent = {
      welcomePage: {
        id: 'welcome',
        title: 'Welcome',
        content: '<h1>Welcome</h1>',
        narration: 'Welcome narration',
        imageKeywords: [],
        imagePrompts: [],
        videoSearchTerms: [],
        duration: 1
      },
      learningObjectivesPage: {
        id: 'objectives',
        title: 'Objectives',
        content: '<h2>Objectives</h2>',
        narration: 'Objectives narration',
        imageKeywords: [],
        imagePrompts: [],
        videoSearchTerms: [],
        duration: 1
      },
      topics: [{
        id: 'topic-0',
        title: 'Safety Basics',
        content: '<p>Safety content</p>',
        narration: 'Safety narration',
        imageKeywords: [],
        imagePrompts: [],
        videoSearchTerms: [],
        duration: 5
      }],
      assessment: {
        questions: [],
        passMark: 80,
        narration: null
      }
    }

    // Mock MediaStore having the audio files
    vi.mocked(invoke).mockImplementation(async (command: string) => {
      if (command === 'get_all_project_media') {
        return [
          {
            id: 'audio-0',
            metadata: { page_id: 'welcome', type: 'audio', original_name: 'audio-0.mp3' }
          },
          {
            id: 'audio-1',
            metadata: { page_id: 'objectives', type: 'audio', original_name: 'audio-1.mp3' }
          },
          {
            id: 'audio-2',
            metadata: { page_id: 'topic-0', type: 'audio', original_name: 'audio-2.mp3' }
          }
        ]
      }
      return null
    })

    // Call the mapper function
    const mappedContent = await mapAudioIdsFromMediaStore(courseContent, 'test-project')
    
    // Verify audioIds were mapped correctly
    expect(mappedContent.welcomePage.audioId).toBe('audio-0')
    expect(mappedContent.learningObjectivesPage.audioId).toBe('audio-1')
    expect(mappedContent.topics[0].audioId).toBe('audio-2')
  })

  it('should demonstrate the full flow: load from storage -> map audioIds', async () => {
    // Step 1: Simulate loading from storage (no audioIds)
    const loadedFromStorage: CourseContent = {
      welcomePage: {
        id: 'welcome',
        title: 'Welcome',
        content: '<h1>Welcome</h1>',
        narration: 'Welcome narration',
        imageKeywords: [],
        imagePrompts: [],
        videoSearchTerms: [],
        duration: 1
      },
      learningObjectivesPage: {
        id: 'objectives',
        title: 'Objectives',
        content: '<h2>Objectives</h2>',
        narration: 'Objectives narration',
        imageKeywords: [],
        imagePrompts: [],
        videoSearchTerms: [],
        duration: 1
      },
      topics: [{
        id: 'topic-0',
        title: 'Safety Basics',
        content: '<p>Safety content</p>',
        narration: 'Safety narration',
        imageKeywords: [],
        imagePrompts: [],
        videoSearchTerms: [],
        duration: 5
      }],
      assessment: {
        questions: [],
        passMark: 80,
        narration: null
      }
    }

    // Verify no audioIds initially
    expect(loadedFromStorage.welcomePage.audioId).toBeUndefined()
    expect(loadedFromStorage.learningObjectivesPage.audioId).toBeUndefined()
    expect(loadedFromStorage.topics[0].audioId).toBeUndefined()

    // Step 2: Mock MediaStore response
    vi.mocked(invoke).mockImplementation(async (command: string) => {
      if (command === 'get_all_project_media') {
        return [
          {
            id: 'audio-0',
            metadata: { page_id: 'welcome', type: 'audio', original_name: 'audio-0.mp3' }
          },
          {
            id: 'audio-1',
            metadata: { page_id: 'objectives', type: 'audio', original_name: 'audio-1.mp3' }
          },
          {
            id: 'audio-2',
            metadata: { page_id: 'topic-0', type: 'audio', original_name: 'audio-2.mp3' }
          }
        ]
      }
      return null
    })

    // Step 3: Map audioIds (this is what App.tsx does)
    const mappedContent = await mapAudioIdsFromMediaStore(loadedFromStorage, 'test-project')

    // Step 4: Verify audioIds are now present
    expect(mappedContent.welcomePage.audioId).toBe('audio-0')
    expect(mappedContent.learningObjectivesPage.audioId).toBe('audio-1')
    expect(mappedContent.topics[0].audioId).toBe('audio-2')

    // Step 5: Verify the mapping preserves all other properties
    expect(mappedContent.welcomePage.title).toBe('Welcome')
    expect(mappedContent.welcomePage.narration).toBe('Welcome narration')
    expect(mappedContent.learningObjectivesPage.title).toBe('Objectives')
    expect(mappedContent.topics[0].title).toBe('Safety Basics')
  })
})