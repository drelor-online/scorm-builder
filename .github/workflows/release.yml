name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.1)'
        required: true
        type: string
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
        default: ''

permissions:
  contents: write
  packages: write

jobs:
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './scorm-builder/src-tauri -> target'

      - name: Update version in package.json
        working-directory: ./scorm-builder
        run: |
          $package = Get-Content package.json | ConvertFrom-Json
          $package.version = "${{ github.event.inputs.version }}"
          $package | ConvertTo-Json -Depth 10 | Set-Content package.json
        shell: pwsh

      - name: Install frontend dependencies
        working-directory: ./scorm-builder
        run: npm ci

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: ./scorm-builder
          args: ${{ matrix.args }}

      - name: Upload Windows artifacts
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: |
            scorm-builder/src-tauri/target/release/bundle/msi/*.msi
            scorm-builder/src-tauri/target/release/bundle/nsis/*.exe
          retention-days: 7

  create-portable:
    needs: build-tauri
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './scorm-builder/src-tauri -> target'

      - name: Update version in package.json
        working-directory: ./scorm-builder
        run: |
          $package = Get-Content package.json | ConvertFrom-Json
          $package.version = "${{ github.event.inputs.version }}"
          $package | ConvertTo-Json -Depth 10 | Set-Content package.json
        shell: pwsh

      - name: Install frontend dependencies
        working-directory: ./scorm-builder
        run: npm ci

      - name: Build frontend
        working-directory: ./scorm-builder
        run: npm run build

      - name: Build Rust binary
        working-directory: ./scorm-builder/src-tauri
        run: cargo build --release

      - name: Create portable package
        shell: pwsh
        run: |
          # Create portable directory structure
          $portableDir = "SCORM-Builder-Portable"
          New-Item -ItemType Directory -Force -Path $portableDir
          
          # Copy the exe
          Copy-Item "scorm-builder/src-tauri/target/release/scorm-builder.exe" "$portableDir/SCORM-Course-Builder.exe"
          
          # Create launcher batch file
          @"
          @echo off
          title SCORM Course Builder
          start "" "%~dp0SCORM-Course-Builder.exe"
          "@ | Out-File -FilePath "$portableDir/Launch-SCORM-Builder.bat" -Encoding ASCII
          
          # Create README
          @"
          SCORM Course Builder - Portable Edition
          ========================================
          
          To run the application:
          1. Double-click Launch-SCORM-Builder.bat
             OR
          2. Run SCORM-Course-Builder.exe directly
          
          This portable version stores all data in:
          %APPDATA%\com.scorm-builder.app
          
          Requirements:
          - Windows 10/11 64-bit
          - WebView2 Runtime (auto-installed if missing)
          "@ | Out-File -FilePath "$portableDir/README.txt" -Encoding ASCII
          
          # Use the input version
          $version = "${{ github.event.inputs.version }}"
          
          # Create ZIP file
          $zipName = "SCORM-Builder-Portable-v$version-Win64.zip"
          Compress-Archive -Path $portableDir -DestinationPath $zipName -CompressionLevel Optimal
          
          Write-Host "Created portable package: $zipName"
          Write-Host "Package size: $((Get-Item $zipName).Length / 1MB) MB"

      - name: Upload portable package
        uses: actions/upload-artifact@v4
        with:
          name: portable-package
          path: SCORM-Builder-Portable-*.zip
          retention-days: 7

  create-release:
    needs: [build-tauri, create-portable]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: |
          ls -la artifacts/
          echo "--- Portable package contents ---"
          ls -la artifacts/portable-package/ || true
          echo "--- Windows installers contents ---"
          ls -la artifacts/windows-installers/ || true
          find artifacts -type f -name "*.msi" -o -name "*.exe" -o -name "*.zip" | head -20

      - name: Generate release notes
        id: release_notes
        run: |
          echo "# SCORM Builder v${{ github.event.inputs.version }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Add custom release notes if provided
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            echo "## Release Notes" >> RELEASE_NOTES.md
            echo "${{ github.event.inputs.release_notes }}" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
          fi
          
          echo "## 📦 Downloads" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Windows" >> RELEASE_NOTES.md
          echo "- **Portable Version** (Recommended): SCORM-Builder-Portable-*.zip" >> RELEASE_NOTES.md
          echo "  - No installation required" >> RELEASE_NOTES.md
          echo "  - Run from any location" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "- **Installer Versions**:" >> RELEASE_NOTES.md
          echo "  - MSI Installer: *.msi" >> RELEASE_NOTES.md
          echo "  - NSIS Installer: *.exe" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## 📝 Recent Changes" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          git log -10 --pretty=format:"- %s" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## 🚀 Getting Started" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "1. Download the portable version" >> RELEASE_NOTES.md
          echo "2. Extract the ZIP file" >> RELEASE_NOTES.md
          echo "3. Run \`Launch-SCORM-Builder.bat\`" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## 📋 System Requirements" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "- Windows 10/11 (64-bit)" >> RELEASE_NOTES.md
          echo "- 4GB RAM minimum" >> RELEASE_NOTES.md
          echo "- 500MB free disk space" >> RELEASE_NOTES.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: SCORM Builder v${{ github.event.inputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            artifacts/portable-package/*.zip
            artifacts/windows-installers/**/*.msi
            artifacts/windows-installers/**/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output summary
        run: |
          echo "## 🎉 Release Created!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- Portable ZIP package" >> $GITHUB_STEP_SUMMARY
          echo "- MSI installer" >> $GITHUB_STEP_SUMMARY
          echo "- NSIS installer" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release is now available at: https://github.com/${{ github.repository }}/releases" >> $GITHUB_STEP_SUMMARY
